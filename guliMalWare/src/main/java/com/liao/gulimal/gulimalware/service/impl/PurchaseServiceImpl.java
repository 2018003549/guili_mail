package com.liao.gulimal.gulimalware.service.impl;

import com.liao.constant.WareConstant;
import com.liao.gulimal.gulimalware.entity.PurchaseDetailEntity;
import com.liao.gulimal.gulimalware.service.PurchaseDetailService;
import com.liao.gulimal.gulimalware.service.WareSkuService;
import com.liao.gulimal.gulimalware.vo.MergeVo;
import com.liao.gulimal.gulimalware.vo.PurchaseFinishVo;
import com.liao.gulimal.gulimalware.vo.PurchaseItemVo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.liao.common.utils.PageUtils;
import com.liao.common.utils.Query;

import com.liao.gulimal.gulimalware.dao.PurchaseDao;
import com.liao.gulimal.gulimalware.entity.PurchaseEntity;
import com.liao.gulimal.gulimalware.service.PurchaseService;
import org.springframework.transaction.annotation.Transactional;


@Service("purchaseService")
public class PurchaseServiceImpl extends ServiceImpl<PurchaseDao, PurchaseEntity> implements PurchaseService {

    @Autowired
    PurchaseDetailService detailService;
    @Autowired
    WareSkuService wareSkuService;
    @Override
    public PageUtils queryPage(Map<String, Object> params) {
        IPage<PurchaseEntity> page = this.page(
                new Query<PurchaseEntity>().getPage(params),
                new QueryWrapper<PurchaseEntity>()
        );

        return new PageUtils(page);
    }

    @Override
    public PageUtils queryUnreceivePage(Map<String, Object> params) {
        IPage<PurchaseEntity> page = this.page(
                new Query<PurchaseEntity>().getPage(params),
                new QueryWrapper<PurchaseEntity>().eq("status",0).or().eq("status",1)
        );
        return new PageUtils(page);
    }
    @Transactional
    @Override
    public void mergePurchase(MergeVo mergeVo) {
        Long purchaseId = mergeVo.getPurchaseId();
        if(purchaseId==null){
            //没有指定采购单就新建一个
            PurchaseEntity purchaseEntity = new PurchaseEntity();
            purchaseEntity.setCreateTime(new Date());
            purchaseEntity.setUpdateTime(new Date());
            purchaseEntity.setStatus(WareConstant.PurchaseStatusEnum.CREATED.getCode());
            this.save(purchaseEntity);
            purchaseId=purchaseEntity.getId();
        }
        //合并采购单，即修改每个采购需求的采购单id和状态
        List<Long> items = mergeVo.getItems();
        Long finalPurchaseId = purchaseId;
        List<PurchaseDetailEntity> collect = items.stream().map(id -> {
            PurchaseDetailEntity detailEntity = new PurchaseDetailEntity();
            detailEntity.setId(id);
            detailEntity.setPurchaseId(finalPurchaseId);
            detailEntity.setStatus(WareConstant.PurchaseDetailStatusEnum.ASSIGNED.getCode());//修改采购状态为已分配
            return detailEntity;
        }).collect(Collectors.toList());
        detailService.updateBatchById(collect);
        PurchaseEntity purchaseEntity = new PurchaseEntity();
        purchaseEntity.setId(purchaseId);
        purchaseEntity.setUpdateTime(new Date());
        this.updateById(purchaseEntity);
    }
    @Transactional
    @Override
    public void received(List<Long> ids) {
        //1.确认当前采购单未被领取【新建或已分配】
        List<PurchaseEntity> collect = ids.stream().map(id -> {
            PurchaseEntity entity = this.getById(id);
            return entity;
        }).filter(entity -> {
            if (entity.getStatus() == WareConstant.PurchaseStatusEnum.CREATED.getCode()
                    || entity.getStatus() == WareConstant.PurchaseStatusEnum.ASSIGNED.getCode()) {
                return true;
            }
            return false;
        }).map(entity -> {
            //设置状态为已接收
            entity.setStatus(WareConstant.PurchaseStatusEnum.RECEIVED.getCode());
            entity.setUpdateTime(new Date());
            return entity;
        }).collect(Collectors.toList());
        //2.改变采购单状态
        this.updateBatchById(collect);
        //3.修改每个采购单的所有采购项的状态
        collect.forEach(purchase->{
            //查出当前采购单的所有采购项
           List<PurchaseDetailEntity> detailEntities=detailService.listDetailByPurchaseId(purchase.getId());
            List<PurchaseDetailEntity> detailEntityList = detailEntities.stream().map(detailEntity -> {
                PurchaseDetailEntity entity = new PurchaseDetailEntity();
                entity.setId(detailEntity.getId());
                entity.setStatus(WareConstant.PurchaseDetailStatusEnum.ING.getCode());
                return entity;
            }).collect(Collectors.toList());
            detailService.updateBatchById(detailEntityList);
        });
    }
    @Transactional
    @Override
    public void done(PurchaseFinishVo purchaseFinishVo) {
        //1.改变采购项状态
        Boolean flag=true;//用于给采购单状态赋值
        List<PurchaseItemVo> items = purchaseFinishVo.getItems();
        List<PurchaseDetailEntity> updates =new ArrayList<>();
        for (PurchaseItemVo item : items) {
            if(item.getStatus()==WareConstant.PurchaseDetailStatusEnum.FAIL.getCode()){
                //只要采购项有一个不成功，那采购单状态就不能为完成
                flag=false;
            }else {
                //将成功的采购商品入库【增加库存】
                PurchaseDetailEntity detailEntity = detailService.getById(item.getItemId());
                wareSkuService.addStock(detailEntity.getSkuId(),detailEntity.getWareId(),detailEntity.getSkuNum());
            }
            PurchaseDetailEntity detailEntity = new PurchaseDetailEntity();
            detailEntity.setStatus(item.getStatus());
            detailEntity.setId(item.getItemId());
            updates.add(detailEntity);
        }
        detailService.updateBatchById(updates);
        //2.改变采购单状态[采购单的状态是根据所以采购项完成结果决定的]
        PurchaseEntity entity = new PurchaseEntity();
        entity.setId(purchaseFinishVo.getId());
        entity.setStatus(flag
                ? WareConstant.PurchaseStatusEnum.FINISHED.getCode()
                : WareConstant.PurchaseStatusEnum.HASERROR.getCode());
        entity.setUpdateTime(new Date());
        this.updateById(entity);
    }

}