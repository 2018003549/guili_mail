package com.liao.gulimal.gulimalware.service.impl;

import com.alibaba.fastjson.TypeReference;
import com.liao.common.to.SkuHasStockTo;
import com.liao.common.to.mq.OrderTo;
import com.liao.common.to.mq.StockLockedTo;
import com.liao.common.utils.R;
import com.liao.exception.NoStockException;
import com.liao.gulimal.gulimalware.entity.WareOrderTaskDetailEntity;
import com.liao.gulimal.gulimalware.entity.WareOrderTaskEntity;
import com.liao.gulimal.gulimalware.feign.OrderFeignService;
import com.liao.gulimal.gulimalware.service.WareOrderTaskDetailService;
import com.liao.gulimal.gulimalware.service.WareOrderTaskService;
import com.liao.gulimal.gulimalware.vo.OrderItemVo;
import com.liao.gulimal.gulimalware.vo.WareSkuLockVo;
import com.rabbitmq.client.Channel;
import lombok.Data;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.rabbit.annotation.RabbitHandler;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.liao.common.utils.PageUtils;
import com.liao.common.utils.Query;

import com.liao.gulimal.gulimalware.dao.WareSkuDao;
import com.liao.gulimal.gulimalware.entity.WareSkuEntity;
import com.liao.gulimal.gulimalware.service.WareSkuService;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;


@Service("wareSkuService")
public class WareSkuServiceImpl extends ServiceImpl<WareSkuDao, WareSkuEntity> implements WareSkuService {
    @Autowired
    RabbitTemplate rabbitTemplate;
    @Autowired
    WareOrderTaskService orderTaskService;
    @Autowired
    WareOrderTaskDetailService orderTaskDetailService;
    @Autowired
    OrderFeignService orderFeignService;

    @Override
    public void releaseStock(StockLockedTo to) throws IOException {
        //库存自动解锁的情况
        Long id = to.getId();//库存工作单id
        Long detailId = to.getDetailId();//某件商品的锁定详情的id
        //1.查询该商品的锁定情况
        WareOrderTaskDetailEntity detailEntity = orderTaskDetailService.getById(detailId);
        if (detailEntity != null) {
            //有信息说明库存锁定成功了
            WareOrderTaskEntity taskEntity = orderTaskService.getById(id);
            String orderSn = taskEntity.getOrderSn();
            //远程查询订单状态
            R r = orderFeignService.getOrderStatus(orderSn);
            if (r.getCode() == 0) {
                Integer status = r.getData(new TypeReference<Integer>() {
                });
                if (status == null || status == 4) {
                    //订单不存在或者订单已取消都需要解锁
                    if(detailEntity.getLockStatus()==1){
                        //只有被锁定的库存才需要解锁
                        this.baseMapper.unLockStock(detailEntity.getSkuId(), detailEntity.getWareId(), detailEntity.getSkuNum(), detailId);
                        //解锁成功就需要将工作单的状态改为已解锁
                        WareOrderTaskDetailEntity entity = new WareOrderTaskDetailEntity();
                        entity.setId(detailId);
                        entity.setLockStatus(2);
                        orderTaskDetailService.updateById(entity);
                    }
                }
            }else {
                throw new RuntimeException("远程调用服务异常");
            }
        }
    }

    @Override
    public PageUtils queryPage(Map<String, Object> params) {
        QueryWrapper<WareSkuEntity> wrapper = new QueryWrapper<>();
        String skuId = (String) params.get("skuId");
        if (!StringUtils.isEmpty(skuId)) {
            wrapper.eq("sku_id", skuId);
        }
        String wareId = (String) params.get("wareId");
        if (!StringUtils.isEmpty(wareId)) {
            wrapper.eq("ware_id", wareId);
        }
        IPage<WareSkuEntity> page = this.page(
                new Query<WareSkuEntity>().getPage(params),
                wrapper
        );
        return new PageUtils(page);
    }

    @Override
    public void addStock(Long skuId, Long wareId, Integer skuNum) {
        List<WareSkuEntity> wareSkuEntities = this.baseMapper.selectList(new QueryWrapper<WareSkuEntity>()
                .eq("sku_id", skuId).eq("ware_id", wareId));
        if (wareSkuEntities == null || wareSkuEntities.size() == 0) {
            //如果没有库存记录就是新增
            WareSkuEntity wareSkuEntity = new WareSkuEntity();
            wareSkuEntity.setSkuId(skuId);
            wareSkuEntity.setWareId(wareId);
            wareSkuEntity.setStock(skuNum);
            //TODO 查询新增库存商品的名称，需要远程调用，如果远程调用失败不回滚事务
            this.baseMapper.insert(wareSkuEntity);
        } else {
            //有库存记录就是修改
            this.baseMapper.addStock(skuId, wareId, skuNum);
        }
    }

    /**
     * 查看所有的sku中哪些有库存
     *
     * @param skuIds
     * @return 返回有库存的id
     */
    @Override
    public List<SkuHasStockTo> getSkusHasStock(List<Long> skuIds) {
        List<SkuHasStockTo> collect = skuIds.stream().map(skuId -> {
            SkuHasStockTo hasStockTo = new SkuHasStockTo();
            //查询当前sku的总库存量【某个sku可能在多个仓库都有库存】
            //可用的总库存是当前库存量减去锁定库存量【即下单未发货】
            Long count = this.baseMapper.getSkuStock(skuId);
            hasStockTo.setSkuId(skuId);
            hasStockTo.setHasStock(count == null ? false : count > 0);
            return hasStockTo;
        }).collect(Collectors.toList());
        return collect;
    }

    @Transactional
    @Override
    public void orderLockStock(WareSkuLockVo vo) {
        //0.保存库存工作单详情,为了追溯订单的行踪
        WareOrderTaskEntity taskEntity = new WareOrderTaskEntity();
        taskEntity.setOrderSn(vo.getOrderSn());
        orderTaskService.save(taskEntity);
        //1.找到每个商品在哪个仓库有库存
        List<OrderItemVo> locks = vo.getLocks();
        List<SkuWareHasStock> lists = locks.stream().map(item -> {
            SkuWareHasStock skuWareHasStock = new SkuWareHasStock();//封装当前商品所有有库存的仓库信息
            Long skuId = item.getSkuId();
            skuWareHasStock.setSkuId(skuId);
            skuWareHasStock.setNum(item.getCount());
            QueryWrapper<WareSkuEntity> queryWrapper = new QueryWrapper<>();
            queryWrapper.eq("sku_id", skuId);//筛选存放过当前商品的仓库
            List<WareSkuEntity> wareList = this.baseMapper.
                    selectList(queryWrapper.and(wrapper -> {
                        wrapper.gt("stock", 0);//查询哪些仓库是有当前商品的库存的
                    }));
            skuWareHasStock.setWareId(wareList.stream().
                    map(WareSkuEntity::getWareId).collect(Collectors.toList()));
            return skuWareHasStock;
        }).collect(Collectors.toList());
        //2.锁定库存
        for (SkuWareHasStock hasStockWare : lists) {
            Boolean isLocked = false;//当前商品的锁定情况
            Long skuId = hasStockWare.getSkuId();
            //遍历每个商品的库存情况
            List<Long> wareIds = hasStockWare.getWareId();
            if (wareIds == null || wareIds.size() == 0) {
                //当前商品在任何仓库都没有库存，一个没有，全体受罪
                throw new NoStockException(skuId);
            }
            for (Long wareId : wareIds) {
                //挨个仓库锁库存，如果所有仓库都锁定完，还是不够，那就直接抛异常
                Long count = this.baseMapper.lockSkuStock(skuId, wareId, hasStockWare.getNum());
                if (count > 0) {
                    //锁定成功【锁定失败就交给下一个仓库继续重试】
                    isLocked = true;
                    //将锁定成功的商品记录保存到数据库中
                    WareOrderTaskDetailEntity detailEntity = new WareOrderTaskDetailEntity(
                            null, skuId, "", hasStockWare.getNum(), taskEntity.getId(), wareId, 1);
                    orderTaskDetailService.save(detailEntity);
                    StockLockedTo lockedTo = new StockLockedTo();
                    lockedTo.setId(taskEntity.getId());
                    lockedTo.setDetailId(detailEntity.getId());
                    rabbitTemplate.convertAndSend("stock-event-exchange", "stock.locked", lockedTo);
                    break;//当前仓库锁定成功，就去锁定下一个商品
                }
            }
            if (!isLocked) {
                //当前商品锁定失败，直接抛异常
                throw new NoStockException(skuId);
            }
        }
        //能走到这一步就说明所有商品都锁成功了,否则早抛异常了
    }
    @Transactional
    @Override
    public void releaseStock(OrderTo to) {
        //防止订单服务卡顿，导致订单状态为改变，无法解锁库存
        String orderSn = to.getOrderSn();
        //查询最新的库存状态，防止重复解锁库存
        WareOrderTaskEntity task=orderTaskService.getOrderTaskByOrderSn(orderSn);
        //根据库存工作单的id找到所有未解锁的商品
        List<WareOrderTaskDetailEntity> list = orderTaskDetailService.
                list(new QueryWrapper<WareOrderTaskDetailEntity>()
                .eq("task_id", task.getId())
                .eq("lock_status", 1));
        for (WareOrderTaskDetailEntity detailEntity : list) {
            this.baseMapper.unLockStock(detailEntity.getSkuId(), detailEntity.getWareId(),
                    detailEntity.getSkuNum(), detailEntity.getId());
            //完事后要把商品在工作单详情的锁定状态变成已解锁【否则自动解锁服务无法识别，就会重复解锁】
            detailEntity.setLockStatus(2);
            orderTaskDetailService.updateById(detailEntity);
        }
    }

    @Data
    class SkuWareHasStock {
        private Long skuId;
        private Integer num;
        private List<Long> wareId;//有该商品库存的所有仓库
    }

}